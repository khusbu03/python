# Generators are iterators

# iterator ,iterable

# below line is an example of iteable
arrList=[1,32,54,76,65]  

# for i in arrList:
#     print(i)

i=iter(arrList)  # thsi i is now an iterator 

print(next(i))  #1
print(next(i))  #32
print(next(i)) #54
print(next(i)) #76
print(next(i)) #65
# print(next(i))  this will give error no item to iterate
 

#  Alist requires to store all teh elements in te memory and then it will execute it
# and  genratos always stpre  a single value at one time so occupie sless memory thus more useful




class NewClass:
    @staticmethod
    def printHello():
        print("This is static method")



# geneartor function
def generatorFunction(num):
    for i in range(1,num+1):
        yield(i)

print(generatorFunction(10))  
numbers=generatorFunction(10)
numbers2 =list(generatorFunction(10))
# Now this list can be used as many times as we want

for num in numbers:
    print(num)

    # This will print the numbers from  1 to 10 only one tie this is because the sequence genertated by the generator can be  used only once this is because 
    # the first an elemnet of ths sequence is brought to the memory it is deleted beforethe next element is brought
    # Thus teh sequence generated by the generator fuction is used only once

for num in numbers:
    print(num)    

print("list :numbers2")
for num in numbers2:
    print(num)    

print("list :numbers2 again")

for num in numbers2:
    print(num)    


def evenNumGeneratorFunc(number):
    for num in range(2,number+1,2):
        yield(num)


evenNumbers=evenNumGeneratorFunc(10)        
print("even numbers")
for num in evenNumbers:
    print(num)


    # we can iterate the iterator only once